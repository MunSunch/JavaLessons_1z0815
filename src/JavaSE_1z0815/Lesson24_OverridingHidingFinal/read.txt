    Краткое рассмотрение полиморфизма
    Все классы полиморфны, и поэтому могут принимать форму своего родителя. Однако, при этом теряется функциональность, так как
в предыдущей форме отсутствуют поля и методы сабкласса. То есть возможно такое написание:
            Object o = new Student();

    Overriding methods(перезапись методов)
    Сабкласс может перезаписывать методы родителя при соблюдении ряда условий:
        1) Идентификатор и список аргументов метода одинаковы;
        2) Модификатор доступа такой же или менее строгий;
        3) Return type такой же или ковариантный, когда между return type'ом родителя и сабкласса есть связь "is-a";
        4) Должен быть non-static, т к static не наследуются, а скрываются.
    * Даже, если метод тупо скопирован у родителя, то он считается перезаписанным.

    Hiding(скрытие)
    Сабкласс может скрывать методы, унаследованные родителем, точнее static методы, если соблюдаются условия:
        1) Идентификатор и список аргументов метода одинаковы;
        2) Модификатор доступа такой же или менее строгий;
        3) Return type такой же или ковариантный, когда между return type'ом родителя и сабкласса есть связь "is-a".
    * все переменные скрываются. Можно даже изменить тип переменной.

   Теперь, когда известно, что скрывается и что перезаписывается, настало время узнать для чего же это нужно?
   В самом начале было написано про полиморфность. Дальнейший вызов методов такого объекта будет определятся buiding'ом.
Кратко говоря, если вызывается что-то перезаписанное, то будет вызываться метод объекта, если вызывается что-то скрытое,
то будет вызываться метод на основе типа переменной.
   Buiding определяет порядок вызова методов класса. Так, существует compile time biding и run time biding. При втором
вызывается метод, определённый в типе runtime объекта, при первом - методы, определенные в типе переменной.
Например, в классе A и B записан один и тот же static метод printer(), затем
            A a = new B();
            a.printer();
   Рассуждаем так: метод - статический, поэтому не наследуется, метод будет вызываться на основе compile time buidding'a, т.е.
на основе типа переменной - метод, определённый в классе A.
    Для убедительности в классах A и B определён один и тот же non-static метод printer_A().
            A a = new B();
            a.printer_A();
   Рассуждаем так: метод-не статический, не final, не privat, метод будет вызываться на основе run time buiding'a, т.е.
на типе run time объекта-класса B.

    Final
    Употребление final перед методами запрещает их перезапись и скрытие, однако они также наследуются потомками.
    Употребление final перед классом запрещает его наследование другими классами.
