    Collections
    Коллекции-это объекты-контейнеры, предназначенные для хранения множества объектов. Разумеется, хранить объекты можно по-разному,
поэтому в языке предусмотрено несколько типов контейнеров. Каждый контейнер, кроме Map, наследуется от интерфейса Collection
(не путать с классом Collections), который в свою очередь наследуется от интерфейса Iterable(), благодаря которому возможно
перебирать элементы в контейнере с помощью foreach loop'a. Смотри скриншот.
    Для начала рассмотрим интерфейс List. Идея List'a: хранить в себе упорядоченную последовательность элементов(индексация)-
объекты, объекты-дубликаты и null. Такой интерфейс реализуют классы ArrayList, LinkedList, Vector, Stack.
    ArrayList(java.util)-массив типа object с изменяемой длиной. Примеры конструкторов приведены на скриншоте. При использовании
конструктора без аргументов такого контейнера на самом деле создается массив типа object с длиной capacity(можно задавать через
конструктор, по умолчанию-10). При добавлении нового элемента в заполненный в ArrayList(size>capacity), создается другой массив
типа object с большей длиной, в который помещаются все элементы старого массива+новые элементы. При использовании конструктора,
принимающего в качестве аргумента другой ArrayList, создается новый массив, в который копируются ссылки на объекты из старого
массива. Методы ArrayList на скриншоте и в классе ArrayListMethods.java:
    * в методе add(int i, datatype d) и set(int i, datatype d) индекс не должен превышать size, в противном случае выбрасывается
IndexOutOfBoundsException;
    * в методе remove(Object o) у объекта должен быть определен метод equals(), ведь перед удалением объекта его необходимо найти
и сравнить. Такая же ситуация с indexOf(), lastIndexof()
