    Объектно-ориентированное программирование
    ООП строится на трёх принципах:
        1) Инкапсуляция;
        2) Наследование;
        3) Полиморфизм;
    Инкапсуляция или сокрытие данных необходимо для того, чтобы не дать позволить сторон нему пользователю внести пагубные
изменения в состояние объекта. Для этого переменным объекта дописывается private, а получение доступа к ним и изменение их
значение реализуется с помощью геттеров и сеттеров. Причем геттер не должен позволять изменять элемент, для этого внутри него
должна быть копия этого элемента. Пример инкапсулированного класса приведен в Human.java. Смотри скриншот.

    Отношения между объектами.
    Всего существует два вида связи между классами:
        1) "IS-A"(это). Такие отношения реализуются при помощи наследования. Пример:
                class Car{}
                class Bus extends Car{}
            В этом примере отношения между объектами Car и Bus такие: Bus(автобус) - это Car(машина).
        2) "HAS-A"(имеет). Вот пример таких отношений:
                class Window{}
                class House{
                    Window window;
                }
            В этом примере: House(дом) имеет Window(окна).

    Наследование необходимо для сокращения кода, группировки классов под общим именем, выстраивания иерархии, системности.
    Сабкласс всегда имеет одного родителя. Абсолютно все классы наследуются от класса Object. Класс наследуется сабклассом, если
он виден.
        Что наследуется сабклассом от родителя, а что нет:
        1) Все публичные поля и методы;
        2) Private атрибуты не наследуются!Но доступны через паблик геттеры и сеттеры;
        3) Все default поля и методы, если они расположены в том же пакете. Например, в классе People существует default
    метод getName(), который наследуется классом Test и без проблем там вызывается и не наследуется классом Employee;
        4) protected поля и аргументы наследуются сабклассом независимо от расположения;
        5) Конструкторы не наследуются.

    KeyWord "super"
    Уже было сказано, что конструкторы не наследуются. Сабкласс в своем конструкторе ссылается на конструктор родителя
при помощи super. Super() подобно this() можно вставлять аргументы. По умолчанию, если конструкторы не записаны, то
в наследнике по дефолту прописывается super();














