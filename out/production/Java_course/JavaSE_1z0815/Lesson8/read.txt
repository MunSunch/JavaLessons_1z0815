    Non-access modifiers: final, static, abstract.

    final
    Этот модификатор употребляется с переменными, методами, классами. При употреблении с переменной создает константу,
значение которой в последующем изменить невозможно. При объявлении такой переменной ОБЯЗАТЕЛЬНО инициализация сразу же
или инициализация в конструкторе, если переменная не static.
    final с локальными переменными и с параметрами методов дает такой же результат.
    С переменными reference datatype адрес фиксируется так, что далее не получится присвоить другую ссылку.

    static
    Этот модификатор употребляется с методами и переменными. Static variable принадлежит только классу и не принадлежит
его объектам, хотя обращение через объект не вызывает ошибки(смотри Static.java):
                            Name_class.name_static_element
 Из этого следует, что static var создается даже без создания каких-либо объектов этого класса.
Если точка входа находится в классе, то доступ к static var может осуществляться без указания класса.
    Те же правила распространяются и на static methods.
    Static элементы класса создаются еще до создания его экземпляров. Следовательно, внутри static элемента нельзя
получить доступ к non-static элементам, так как их еще не существует(StaticElements.java). Напротив, внутри non-static
элементов возможно получить доступ, так как и те и те уже созданы.

    Инициализация static final variable должна просходить при объявлении это переменной и больше нигде. Например:
            public static final int COUNT = 11;